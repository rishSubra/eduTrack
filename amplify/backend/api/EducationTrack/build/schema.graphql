
type Post @aws_iam @aws_api_key {
  id: ID!
  post_name: String!
  post_url: AWSURL!
  post_date: AWSDate!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Event @aws_iam @aws_api_key {
  id: ID!
  event_title: String!
  event_type: String
  start_time: AWSTime!
  end_time: AWSTime!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type User @aws_iam @aws_api_key {
  id: ID!
  first_name: String!
  last_name: String!
  email: AWSEmail!
  phone: AWSPhone!
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection @aws_api_key @aws_iam {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  post_name: ModelStringInput
  post_url: ModelStringInput
  post_date: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

type Query {
  getPost(id: ID!): Post @aws_api_key @aws_iam
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection @aws_api_key @aws_iam
  getEvent(id: ID!): Event @aws_api_key @aws_iam
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection @aws_api_key @aws_iam
  syncEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEventConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
}

input ModelPostConditionInput {
  post_name: ModelStringInput
  post_url: ModelStringInput
  post_date: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  post_name: String!
  post_url: AWSURL!
  post_date: AWSDate!
  _version: Int
}

input UpdatePostInput {
  id: ID!
  post_name: String
  post_url: AWSURL
  post_date: AWSDate
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event @aws_api_key @aws_iam
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event @aws_api_key @aws_iam
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  post_name: ModelSubscriptionStringInput
  post_url: ModelSubscriptionStringInput
  post_date: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["createPost"]) @aws_api_key @aws_iam
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["updatePost"]) @aws_api_key @aws_iam
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["deletePost"]) @aws_api_key @aws_iam
  onCreateEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["createEvent"]) @aws_api_key @aws_iam
  onUpdateEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["updateEvent"]) @aws_api_key @aws_iam
  onDeleteEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["deleteEvent"]) @aws_api_key @aws_iam
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
}

type ModelEventConnection @aws_api_key @aws_iam {
  items: [Event]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEventFilterInput {
  id: ModelIDInput
  event_title: ModelStringInput
  event_type: ModelStringInput
  start_time: ModelStringInput
  end_time: ModelStringInput
  description: ModelStringInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
}

input ModelEventConditionInput {
  event_title: ModelStringInput
  event_type: ModelStringInput
  start_time: ModelStringInput
  end_time: ModelStringInput
  description: ModelStringInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
}

input CreateEventInput {
  id: ID
  event_title: String!
  event_type: String
  start_time: AWSTime!
  end_time: AWSTime!
  description: String
  _version: Int
}

input UpdateEventInput {
  id: ID!
  event_title: String
  event_type: String
  start_time: AWSTime
  end_time: AWSTime
  description: String
  _version: Int
}

input DeleteEventInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionEventFilterInput {
  id: ModelSubscriptionIDInput
  event_title: ModelSubscriptionStringInput
  event_type: ModelSubscriptionStringInput
  start_time: ModelSubscriptionStringInput
  end_time: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  and: [ModelSubscriptionEventFilterInput]
  or: [ModelSubscriptionEventFilterInput]
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  first_name: ModelStringInput
  last_name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  role: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  first_name: ModelStringInput
  last_name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  role: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  first_name: String!
  last_name: String!
  email: AWSEmail!
  phone: AWSPhone!
  role: String!
  _version: Int
}

input UpdateUserInput {
  id: ID!
  first_name: String
  last_name: String
  email: AWSEmail
  phone: AWSPhone
  role: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  first_name: ModelSubscriptionStringInput
  last_name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phone: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

